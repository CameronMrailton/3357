import binascii
import socket
import struct
import sys
import hashlib
UDP_IP = "127.0.0.1"
UDP_PORT = 5005
unpacker = ('I I 32s')
print("UDP target IP:", UDP_IP)
print("UDP target port:", UDP_PORT)
#Create the Checksum
values = (0,0,b'NCC-1701')
UDP_Data = struct.Struct('I I 8s')
packed_data = UDP_Data.pack(*values)
chksum =  bytes(hashlib.md5(packed_data).hexdigest(), encoding="UTF-8")
#Build the UDP Packet
values = (0,0,b'NCC-1701',chksum)
UDP_Packet_Data = struct.Struct('I I 8s 32s')
UDP_Packet = UDP_Packet_Data.pack(*values)
#Send the UDP Packet
sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) # UDP
sock.settimeout(.09)
sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
print ("Packet sent", UDP_Packet)
#set timeout exception
NotReceived = True
seq = 0
# keeps waiting to receive if ACK if not  ACK ==0 or CHKSUM = chksum
while NotReceived:
    try:
        #unpack
        data, addr, = sock.recvfrom(1024)  # buffer size is 1024 bytes
        UDP_Packet = unpacker.unpack(data)
        if UDP_Packet[0] == 1 and UDP_Packet[2] == chksum and UDP_Packet[1] == seq:
            NotReceived = False
            seq = 1- seq
        else:
            sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
            continue
    except socket.timeout as e:
        print("Timer expired")
        sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
        continue
#create check sum
values = (0,seq,b'NCC-1422')
packer = struct.Struct('I I 8s')
packed_data = packer.pack(*values)
chksum =  bytes(hashlib.md5(packed_data).hexdigest(), encoding="UTF-8")
#building secong packet
values = (0,seq,b'NCC-1422',chksum)
UDP_Packet_Data = struct.Struct('I I 8s 32s')
UDP_Packet = UDP_Packet_Data.pack(*values)
#send second
sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
#send third packet
while NotReceived:
    try:
        data, addr = sock.recvfrom(1024)
        UDP_Packet = data
        if UDP_Packet[0] == 1 and UDP_Packet[3] == chksum and UDP_Packet[1] == seq:
            NotReceived = False
            seq = 1 - seq
        else:
            sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
            continue
    except socket.timeout as e:
        print("Timer expired")
        sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
        continue
#create check sum
values = (UDP_Packet[0],seq,b'NCC-1017')
packer = struct.Struct('I I 8s')
packed_data = packer.pack(*values)
chksum =  bytes(hashlib.md5(packed_data).hexdigest(), encoding="UTF-8")
#building secong packet
values = (0,seq,b'NCC-1017',chksum)
UDP_Packet_Data = struct.Struct('I I 8s 32s')
UDP_Packet = UDP_Packet_Data.pack(*values)
sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
#send third
sock.sendto(UDP_Packet, (UDP_IP, UDP_PORT))
